<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vue on A桑的杂货箱</title>
    <link>https://sunwei.blog/tags/vue/</link>
    <description>Recent content in vue on A桑的杂货箱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 17 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sunwei.blog/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AUXPI 图床</title>
      <link>https://sunwei.blog/p/auxpi-%E5%9B%BE%E5%BA%8A/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sunwei.blog/p/auxpi-%E5%9B%BE%E5%BA%8A/</guid>
      <description>前情提要 这个是参加全国计算机设计大赛的时候写的，现在已经比完了，三等奖有点不开心，果然还是不应该讲太多技术方面的东西，应该多讲一些细节方面的东西。不过好消息是这个项目参加互联网+的成绩还不错
第二章概要设计 一．各个模块功能 系统的开发是前后端分离的，后端采用的架构模式为 MVC ，后端的开发所用的各个目录的功能和作用如下图所示。
为了保证高复用，我们加入了 Server 层作为可以拔插的插件进行配置和使用，下面是后端的文件分布目录
. ├── LICENSE ├── README.md ├── auxpiAll #内置了需要经常格式话成 JSON / XML 的结构体 ├── bootstrap #启动程序的时候初始化的库，内置了 helper ，仅能被调用 ├── build #编译文件存放目录 ├── build.sh #自动化编译脚本 ├── conf #配置文件目录 ├── controllers #控制器存放目录 ├── install.sh #自动化安装脚本 ├── log #日志包 ├── main.go #入口文件 ├── middleware #中间件 ├── models #模型层 ├── pem #RSA 秘钥对，在初始化程序的时候自动生成 ├── resource #前端 Vue 源码存放目录 ├── routers #路由 ├── server #可拔插的服务目录 ├── static #静态资源存放 ├── tests #测试文件 ├── tools #工具类 ├── utils #控制器专用工具类 └── views #视图层 前端我们采用了 Vue+Webpack 进行前端工程化开发，前端最大的特点是组件化开发，这也是我们所使用的核心的前端技术，下面是前端开发的文件分布</description>
    </item>
    
  </channel>
</rss>